<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>个人博客</title>
    <link>https://ynwugang.github.io/</link>
    <description>Recent content on 个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 24 May 2022 12:58:24 +0800</lastBuildDate><atom:link href="https://ynwugang.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringCloud(一)</title>
      <link>https://ynwugang.github.io/posts/spring/springcloud/springcloud%E4%B8%80/</link>
      <pubDate>Tue, 24 May 2022 12:58:24 +0800</pubDate>
      
      <guid>https://ynwugang.github.io/posts/spring/springcloud/springcloud%E4%B8%80/</guid>
      <description>1、常见面试题 1.1、生么是微服务？ 1.2、微服务之间是如何独立通讯的？ 1.3、SpringCloud和Dubbo有哪些区别？ 1.4、Springboot和SpringClound，请你谈谈对他们的理解 1.5、什么是服务熔断？什么是服务降级？ 1.6、微服务的优缺点分别是什么？说下你在项目开发中遇到的坑 1.7、你所知道的微服务技术栈有哪些？请列举一二 1.8、eureka和zookeeper都可以提供服务注册与发现的功能，请说说两个的区别？
2、微服务概述 2.1、什么是微服务 **什么是微服务？**微服务（Microservice Architecture）是近几年流行的一种架构思想，关于它的概念很难一言以蔽之。 究竟什么是微服务呢？我们在此引用ThoughtWork公司的首席科学家Martin Fowler于2014年提出的一段话： 原文：https://martinfowler.com/articles/microservices.html 汉化：https://www.cnblogs.com/liuning8023/p/4493156.html
  就目前而言，对于微服务，业界并没有一个统一的，标准的定义
  但通常而言，微服务架构是一种架构模式，或者说是一种架构风格，它提倡将单一的应用程序划分成一组小的服务，每个服务运行在其独立的自己的进程内，服务之间互相协调，互相配合，为用户提供最终价值。服务之间采用轻量级的通信机制互相沟通，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生成环境中。另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储；
  官方的话太过生涩，我们从技术维度来理解下：
 微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事请，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己独立的数据库。  2.2、微服务与微服务架构 微服务 强调的是服务的大小，他关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用，狭义的看，可以看做是IDEA中的一个个微服务工程，或者Moudle
1.IDEA工具里面使用Maven开发的一个个独立的小Moudle，它具体是使用SpringBoot开发的一个小模块，专业的事情交给专业的模块来做，一个模块就做这一件事情 2.强调的是一个个的个体，每个个体完成一个具体的任务或者功能！ 微服务架构 一种新的架构形式，Martin Fowler，2014提出
微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调，互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相协作，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生成环境中，另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。
2.3、微服务优缺点 优点：
  每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或者业务需求；
  开发简单，开发效率提高，一个服务可能就是专一的只干一件事；
  微服务能够被小团队单独开发，这个小团队是2-5人的开发人员组成；
  微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的。
  微服务能使用不同的语言开发；
  易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如Jenkins、Hudson、Bamboo；
  微服务易于被开发人员理解、修改和维护，这样小团队能够更关注自己的工作成果。无需通过合作才能体现价值；
  微服务允许你利用、融合最新技术；
  微服务只是业务逻辑的代码，不会和HTML、CSS或其他界面混合；
  每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一数据库；</description>
    </item>
    
    <item>
      <title>SpringCloud(二)</title>
      <link>https://ynwugang.github.io/posts/spring/springcloud/springcloud%E4%BA%8C/</link>
      <pubDate>Tue, 24 May 2022 12:58:24 +0800</pubDate>
      
      <guid>https://ynwugang.github.io/posts/spring/springcloud/springcloud%E4%BA%8C/</guid>
      <description>4、Rest学习环境搭建 4.1、总体介绍   我们会使用一个Dept部门模块做一个微服务通用案例Consumer消费之（Client）通过REST调用Provider提供者（Server）提供的服务。
  回忆Spring，SpringMVC，Mybatis等以往学习的知识&amp;hellip;
  Maven的分包分模块架构复习
一个简单的Maven模块结构是这样的：  -- app-parent：一个父项目（app-parent）聚合了很多子项目（app-util，app-dao，app-web...） |-- pom.xml | |-- app-core ||---- pom.xml | |-- app-web ||------ pom.xml ...... 一个父工程带着多个子Module子模块 MicroServiceCloud父工程（project）下初次带着3个子模块（Moudule）
  microservicecloud-api【封装的整体entity/接口/公共配置等】
  microservicecloud-provide-dept-8001【服务提供者】
  microservicecloud-consumer-dept-80【服务消费者】
    动手开干！
  4.2、SpringCloud版本选择 大版本说明
   Spring Boot Spring Cloud 关系     1.2.x Angel版本（天使） 兼容Spring Boot 1.2.x   1.3.x Brixton版本（布里克斯顿） 兼容Spring Boot 1.</description>
    </item>
    
    <item>
      <title>Mysql下载安装</title>
      <link>https://ynwugang.github.io/posts/mysql/mysql%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85/</link>
      <pubDate>Fri, 13 May 2022 09:58:00 +0800</pubDate>
      
      <guid>https://ynwugang.github.io/posts/mysql/mysql%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85/</guid>
      <description>1、下载 官网下载地址：https://downloads.mysql.com/archives/community/
下载页面 
2、解压 将下载的zip文件解压，放到自己喜欢的目录下。 此处我将其放在D:\development\database下。 
3、配置环境变量 直接在path下添加mysql bin目录的路径即可 
4、新建mysql配置文件 在mysql目录下新建一个mysql的配置文件 my.ini 
配置文件内容如下：
[mysqld] # 根据实际修改目录 basedir=D:\development\database\mysql-5.7.29\ datadir=D:\development\database\mysql-5.7.29\data\ port=3306 skip-grant-tables 5、安装mysql 启动管理员模式下的CMD，进入mysql的bin目录，运行所有命令
5.1、安装mysql服务 命令：mysqld -install 
此处可能会出现缺少MSVCR120.dll的系统提示，直接到官网下载安装Visual C++ 2013即可。 官网地址：https://support.microsoft.com/en-us/help/3179560/update-for-visual-c-2013-and-visual-c-redistributable-package
下载的时候注意选择系统对应的版本（x64或x32）和选择地址为中国的下载连接。 详情可以参考博客：使用mysqld &amp;ndash;install命令时出现MSVCR120.dll文件丢失错误
5.2、初始化数据库文件 命令：mysqld --initialize-insecure --user=mysql 
5.3、启动mysql，修改密码 启动mysql服务： 命令；net start mysql 
登陆mysql： 命令：mysql -u root -p  此次登陆不需要输入密码（我们在配置文件中加入了：skip-grant-tables），直接回车即可。
修改默认密码： 执行更新语句：update mysql.user set authentication_string=password(&#39;123456&#39;) where user=&#39;root&#39; and Host = &#39;localhost&#39;; 
刷新权限： 命令：flush privileges;</description>
    </item>
    
    <item>
      <title>Java基础</title>
      <link>https://ynwugang.github.io/posts/java%E9%9D%A2%E8%AF%95/java%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 09 May 2022 14:41:08 +0800</pubDate>
      
      <guid>https://ynwugang.github.io/posts/java%E9%9D%A2%E8%AF%95/java%E5%9F%BA%E7%A1%80/</guid>
      <description>1.Java基础 1.1 为什么Java代码可以实现一次编写、到处运行？ JVM（Java虚拟机）是Java跨平台的关键。
在运行程序前，Java源代码（.java）需要经过编译器编译成字节码（.class）。在程序运行时，JVM负责将字节码翻译成特定平台下的机器码并运行，也就是说，只要在不同的平台上安装对应的JVM，就可以运行字节码文件。 同一份java源代码在不同的平台上运行，它不需要做任何的改变，并且只需要编译一次。而编译好的字节码，是通过JVM这个中间的“桥梁”实现跨平台的，JVM是与平台相关的软件，它能将同意的字节码翻译成该平台的机器码。
1.2 一个Java文件里面可以有多个类吗（不含内部类）？   一个Java文件里可以有多个类，但最多只能有一个被public修饰的类；
  如果这个Java文件中包含public修饰的类，则这个类的名称必须和Java文件名一致。
  1.3 说一说你对Java访问权限的了解 Java语言为我们提供了三种访问修饰符，即private、protected、public，在使用这些修饰符修饰目标时，一共可以形成四种访问权限，即private、defailt、protected、public，注意在不加任何修饰符时为default访问权限。
在修饰成员变量/成员方法时，该成员的四种访问权限的含义如下：
  private：该成员可以被该类内部成员访问；
  default：该成员可以被该类内部成员访问，也可以被同一包下其他的类访问；
  protected：该成员可以被该类内部成员访问，也可以被同一包下的其他类访问，还可以被它的子类访问；
  public：该成员可以被任意包下，任意类的成员进行访问；
  在修饰类时，该类只有两种访问权限，对应的访问权限的含义如下：
  default：给类可以被同一包下其他的类访问；
  public：该类可以被任意包下，任意的类访问；
  1.4 介绍一下Java的数据类型 Java数据类型包括基本数据类型和引用数据类型两大类。
  基本数据类型有8个，可以分为4个小类，分别时整数型（byte/short/int/long）、浮点型（float/double）、字符型（char）、布尔型（boolean）。其中，4个整数型中，int类型最为常用。2个浮点型中，double最为常用。另外，在这8个基本类型中，除了布尔型之外的其他7个类型，都可以看做是数字类型，它们互相之间可以进行类型转换。
  引用类型就是对一个对象的引用，根据引用对象类型的不同，可以将引用类型分为3类，即数组、类、接口类型。引用类型本质上就是通过指针，指向堆中对象所持有的内存空间，只是Java语言不再沿用指针这个说法。
  1.5 int类型的数据范围是多少？ int类型占4字节（32位），数据范围是-2^31 ~ 2^31-1。
1.6 请介绍成员变量和局部变量的区别 Java中的变量分为成员变量和局部变量，它们的区别如下：
成员变量：
  成员变量是在类的范围内定义的变量；
  成员变量有默认的初始值；
  未被static修饰的成员变量也叫实例变量，它存储于对象所在的堆内存中，生命周期与对象相同；</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://ynwugang.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ynwugang.github.io/about/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent lacinia lorem quis sodales auctor. Donec bibendum odio leo, bibendum iaculis lectus dapibus sit amet. Etiam ut euismod lectus, vel finibus metus. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Integer quis vestibulum justo. Duis scelerisque ullamcorper sem, eget congue lorem ultrices mattis. Nam ut mollis tellus, id facilisis turpis. Duis ac egestas mi, a mattis dolor. Curabitur vestibulum est nec tortor hendrerit, vehicula malesuada quam tempor.</description>
    </item>
    
  </channel>
</rss>
