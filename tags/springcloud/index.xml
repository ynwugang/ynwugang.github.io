<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SpringCloud on 个人博客</title>
    <link>https://ynwugang.github.io/tags/springcloud/</link>
    <description>Recent content in SpringCloud on 个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 24 May 2022 12:58:24 +0800</lastBuildDate><atom:link href="https://ynwugang.github.io/tags/springcloud/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringCloud(一)</title>
      <link>https://ynwugang.github.io/posts/spring/springcloud/springcloud%E4%B8%80/</link>
      <pubDate>Tue, 24 May 2022 12:58:24 +0800</pubDate>
      
      <guid>https://ynwugang.github.io/posts/spring/springcloud/springcloud%E4%B8%80/</guid>
      <description>1、常见面试题 1.1、生么是微服务？ 1.2、微服务之间是如何独立通讯的？ 1.3、SpringCloud和Dubbo有哪些区别？ 1.4、Springboot和SpringClound，请你谈谈对他们的理解 1.5、什么是服务熔断？什么是服务降级？ 1.6、微服务的优缺点分别是什么？说下你在项目开发中遇到的坑 1.7、你所知道的微服务技术栈有哪些？请列举一二 1.8、eureka和zookeeper都可以提供服务注册与发现的功能，请说说两个的区别？
2、微服务概述 2.1、什么是微服务 **什么是微服务？**微服务（Microservice Architecture）是近几年流行的一种架构思想，关于它的概念很难一言以蔽之。 究竟什么是微服务呢？我们在此引用ThoughtWork公司的首席科学家Martin Fowler于2014年提出的一段话： 原文：https://martinfowler.com/articles/microservices.html 汉化：https://www.cnblogs.com/liuning8023/p/4493156.html
  就目前而言，对于微服务，业界并没有一个统一的，标准的定义
  但通常而言，微服务架构是一种架构模式，或者说是一种架构风格，它提倡将单一的应用程序划分成一组小的服务，每个服务运行在其独立的自己的进程内，服务之间互相协调，互相配合，为用户提供最终价值。服务之间采用轻量级的通信机制互相沟通，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生成环境中。另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储；
  官方的话太过生涩，我们从技术维度来理解下：
 微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事请，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己独立的数据库。  2.2、微服务与微服务架构 微服务 强调的是服务的大小，他关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用，狭义的看，可以看做是IDEA中的一个个微服务工程，或者Moudle
1.IDEA工具里面使用Maven开发的一个个独立的小Moudle，它具体是使用SpringBoot开发的一个小模块，专业的事情交给专业的模块来做，一个模块就做这一件事情 2.强调的是一个个的个体，每个个体完成一个具体的任务或者功能！ 微服务架构 一种新的架构形式，Martin Fowler，2014提出
微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调，互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相协作，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生成环境中，另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。
2.3、微服务优缺点 优点：
  每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或者业务需求；
  开发简单，开发效率提高，一个服务可能就是专一的只干一件事；
  微服务能够被小团队单独开发，这个小团队是2-5人的开发人员组成；
  微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的。
  微服务能使用不同的语言开发；
  易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如Jenkins、Hudson、Bamboo；
  微服务易于被开发人员理解、修改和维护，这样小团队能够更关注自己的工作成果。无需通过合作才能体现价值；
  微服务允许你利用、融合最新技术；
  微服务只是业务逻辑的代码，不会和HTML、CSS或其他界面混合；
  每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一数据库；</description>
    </item>
    
    <item>
      <title>SpringCloud(二)</title>
      <link>https://ynwugang.github.io/posts/spring/springcloud/springcloud%E4%BA%8C/</link>
      <pubDate>Tue, 24 May 2022 12:58:24 +0800</pubDate>
      
      <guid>https://ynwugang.github.io/posts/spring/springcloud/springcloud%E4%BA%8C/</guid>
      <description>4、Rest学习环境搭建 4.1、总体介绍   我们会使用一个Dept部门模块做一个微服务通用案例Consumer消费之（Client）通过REST调用Provider提供者（Server）提供的服务。
  回忆Spring，SpringMVC，Mybatis等以往学习的知识&amp;hellip;
  Maven的分包分模块架构复习
一个简单的Maven模块结构是这样的：  -- app-parent：一个父项目（app-parent）聚合了很多子项目（app-util，app-dao，app-web...） |-- pom.xml | |-- app-core ||---- pom.xml | |-- app-web ||------ pom.xml ...... 一个父工程带着多个子Module子模块 MicroServiceCloud父工程（project）下初次带着3个子模块（Moudule）
  microservicecloud-api【封装的整体entity/接口/公共配置等】
  microservicecloud-provide-dept-8001【服务提供者】
  microservicecloud-consumer-dept-80【服务消费者】
    动手开干！
  4.2、SpringCloud版本选择 大版本说明
   Spring Boot Spring Cloud 关系     1.2.x Angel版本（天使） 兼容Spring Boot 1.2.x   1.3.x Brixton版本（布里克斯顿） 兼容Spring Boot 1.</description>
    </item>
    
  </channel>
</rss>
